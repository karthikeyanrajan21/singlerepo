name: "Playwright and JFrog Integration"

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm install

      # Step 4: Install Playwright browsers
      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      # Step 5: Start the server
      - name: Start the server
        run: |
          npm start &  # Run the server in the background
          echo $! > server.pid  # Save the process ID (PID) for later termination

      # Step 6: Run Playwright Tests
      - name: Run Playwright Tests
        run: |
          set +e  # Allow script to continue even if tests fail
          npx playwright test --reporter=html
          echo "TEST_RESULT=$?" >> $GITHUB_ENV  # Store the exit code (0=pass, non-zero=fail)
        continue-on-error: true  # Continue even if tests fail

      # Step 7: Stop the server
      - name: Stop the server
        run: |
          kill $(cat server.pid)  # Kill the server using the saved PID
          rm server.pid  # Clean up the PID file

      # Step 8: Upload Playwright HTML Report
      - name: Upload Playwright HTML Report
        if: always()  # Upload the report regardless of test outcomes
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report

  build:
    runs-on: ubuntu-latest
    needs: test  # This ensures the build runs only after the test job

    steps:
      # Step 1: Checkout the repository
      - name: Checkout
        uses: actions/checkout@v3

      # Step 2: Check test result and conditionally proceed
      - name: Check test result and report status
        run: |
          if [ "${{ env.TEST_RESULT }}" -eq 0 ]; then
            echo "Playwright tests passed, proceeding with the build."
          else
            echo "Playwright tests failed, skipping the build."
            exit 0  # Exit successfully but skip the rest of the steps
          fi

      # Step 3: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      # Step 4: Install project dependencies using npm and JFrog CLI
      - name: Install Deps using JFrog CLI
        run: jf npm install

      # Step 5: Build the project if tests passed
      - name: Build Project
        if: ${{ env.TEST_RESULT == 0 }}
        run: npm run build

      # Step 6: Setup JFrog CLI for npm repositories
      - name: Setup JFrog CLI
        if: ${{ env.TEST_RESULT == 0 }}
        uses: jfrog/setup-jfrog-cli@v3
        env:
          JF_URL: ${{ secrets.JF_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}

      # Step 7: Set CLI Config for JFrog npm repositories
      - name: Set CLI Config
        if: ${{ env.TEST_RESULT == 0 }}
        run: jf npm-config --global=true --repo-resolve=cgdemo-virtual --repo-deploy=cgdemo-virtual

      # Step 8: Archive Artifacts into TGZ with Timestamp
      - name: Archive Artifacts into TGZ with Timestamp
        if: ${{ env.TEST_RESULT == 0 }}
        run: |
          TIMESTAMP=$(date +'%Y%m%d%H%M%S')
          tar -czf build_${TIMESTAMP}.tgz build/

      # Step 9: Push Artifacts to JFrog
      - name: Push Artifacts to JFrog
        if: ${{ env.TEST_RESULT == 0 }}
        run: jf rt u "build_${{ env.TIMESTAMP }}.tgz" "cgdemo-virtual/cg-artifacts/build_${{ env.TIMESTAMP }}.tgz"

      # Step 10: Publish the npm package to JFrog Artifactory
      - name: Publish npm package
        if: ${{ env.TEST_RESULT == 0 }}
        run: jf npm publish

      # Step 11: Publish Build Info with JFrog CLI
      - name: Publish Build Info with JFrog CLI
        if: ${{ env.TEST_RESULT == 0 }}
        run: |
          jf rt build-collect-env
          jf rt build-add-git
          jf rt build-publish
