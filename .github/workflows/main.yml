name: "Playwright and JFrog Integration"

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm install

      # Step 4: Install Playwright browsers
      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      # Step 5: Start the server
      - name: Start the server
        run: |
          npm start &  # Run the server in the background
          echo $! > server.pid  # Save the process ID (PID) for later termination

      # Step 6: Run Playwright Tests
      - name: Run Playwright Tests
        run: |
          set +e  # Allow script to continue even if tests fail
          npx playwright test --reporter=html
          echo "TEST_RESULT=$?" >> $GITHUB_ENV  # Store the exit code (0=pass, non-zero=fail)
        continue-on-error: true  # Continue even if tests fail

      # Step 7: Stop the server
      - name: Stop the server
        run: |
          kill $(cat server.pid)  # Kill the server using the saved PID
          rm server.pid  # Clean up the PID file

      # Step 8: Upload Playwright HTML Report
      - name: Upload Playwright HTML Report
        if: always()  # Upload the report regardless of test outcomes
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report

      # Step 9: Check test result and report status
      - name: Check test result and report status
        run: |
          if [ "${{ env.TEST_RESULT }}" -eq 0 ]; then
            echo "Playwright tests passed, proceeding with the build."

            # Step 10: Setup JFrog CLI for communication with JFrog Artifactory
            echo "Setting up JFrog CLI..."
            echo "JF_URL=${{ secrets.JF_URL }}" > jfrog.config
            echo "JF_ACCESS_TOKEN=${{ secrets.JF_ACCESS_TOKEN }}" >> jfrog.config
            jfrog config add --interactive=false jfrog.config

            # Step 11: Configure JFrog for npm repositories
            echo "Configuring JFrog CLI..."
            run: jf npm-config --global=true --repo-resolve=cgdemo-virtual --repo-deploy=cgdemo-virtual

            # Step 12: Install project dependencies using npm and JFrog CLI
            echo "Installing project dependencies..."
            run: jf npm install

            # Step 13: Build the project
            echo "Building the project..."
            run: npm run build

            # Step 14: Get current timestamp to use in file names
            echo "Getting current timestamp..."
            id: vars
            run: echo "TIMESTAMP=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV

            # Step 15: Archive the build directory into a .tgz file with a timestamp
            echo "Archiving build artifacts..."
            run: tar -czf build_${{ env.TIMESTAMP }}.tgz build/

            # Step 16: Push the compressed .tgz file to JFrog Artifactory
            echo "Pushing artifacts to JFrog..."
            run: |
              jf rt u "build_${{ env.TIMESTAMP }}.tgz" "cgdemo-virtual/cg-artifacts/build_${{ env.TIMESTAMP }}.tgz"

            # Step 17: Publish the npm package to JFrog Artifactory
            echo "Publishing npm package..."
            run: jf npm publish

            # Step 18: Publish build information to JFrog
            echo "Publishing build info..."
            run: |
              jf rt build-collect-env
              jf rt build-add-git
              jf rt build-publish
          else
            echo "Playwright tests failed, skipping the build."
            exit 0  # Exit successfully but skip the rest of the steps
          fi
